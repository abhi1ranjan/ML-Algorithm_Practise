{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "fc2647a248e94d589830b9d7c300e19d5ec034c9"
   },
   "source": [
    "Welcome to my notebook on Kaggle. I did record my notes so it might help others in their journey to understand Machine Learning / Neural Networks by examples. This notebook is my way to contribute back to the Kaggle platform and community.\n",
    "\n",
    "I noticed that a lot of terminology and algorithems are thrown around and often some good math to underpin why it is correct. I can read, study and even understand it but after lot's of other terminology and weeks passing I catch myself often going back to understand it again because it didn't \"stick\". Doing exercises, work with the algorithm and trying out for myself helps me to overcome this, learning by example. So for Expectation Mazimization I created this notebook and try it for myself in a simple example. \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Table of Contents\n",
    "  \n",
    "1. [Expectation Maximization](#sec1)\n",
    "1. [How the EM algorithem works](#sec2)\n",
    "1. [Basic example of Expectation Maximization](#sec3)\n",
    "    1. [Gaussian Mixture Model of 2 Gaussians](#sec31)\n",
    "    1. [A single Gaussion will not fit the data well](#sec32)\n",
    "1. [The code for EM with 2 Gaussian mixture model](#sec4)\n",
    "    1. [See the algorithm in action](#sec41)\n",
    "    1. [Find best Mixture Gaussian model](#sec42)\n",
    "    1. [Results](#sec43)\n",
    "    1. [Further enhancements to the code](#sec44)    \n",
    "1. [sklearn GaussianMixture](#sec5) \n",
    "1. [If you want to explore this subject further](#sec6)   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "b599a51f9715ac53083c707c2f365ee4f0acc0da"
   },
   "source": [
    "<a id='sec1'></a>\n",
    "# Expectation Maximization\n",
    "In statistics, an expectation–maximization (EM) algorithm is an iterative method to find maximum likelihood or maximum a posteriori (MAP) estimates of parameters in statistical models, where the model depends on unobserved latent variables. The EM iteration alternates between performing an expectation (E) step, which creates a function for the expectation of the log-likelihood evaluated using the current estimate for the parameters, and a maximization (M) step, which computes parameters maximizing the expected log-likelihood found on the E step. These parameter-estimates are then used to determine the distribution of the latent variables in the next E step.\n",
    "\n",
    "Source: [Wikipedia](https://en.wikipedia.org/wiki/Expectation%E2%80%93maximization_algorithm)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "fa89cb5dec11daf8aa8e0bca9cc965769f6f03ea"
   },
   "source": [
    "<a id='sec2'></a>\n",
    "# How the EM algorithm works\n",
    "\n",
    "Please have a look at this short video where it is explained very well on a 1-dimensional example: https://www.youtube.com/watch?v=iQoXFmbXRJA  \n",
    "  \n",
    "    \n",
    "    \n",
    "\n",
    "![](http://www.wilsonmongwe.co.za/wp-content/uploads/2015/07/400px-EM.jpg)\n",
    "\n",
    "Below slides explaining with a 2-dimensional example\n",
    "![alt text](http://i.imgur.com/0cTmOja.png \"Logo Title Text 1\")\n",
    "\n",
    "![alt text](http://i.imgur.com/8kQ9aa6.png \"Logo Title Text 1\")\n",
    "\n",
    "![alt text](http://i.imgur.com/A1j3lqB.png \"Logo Title Text 1\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "1527cec278f530e10d5cc4356bfcd1121422bd34"
   },
   "source": [
    "<a id='sec3'></a>\n",
    "# Basic example of Expectation Maximization \n",
    "\n",
    "Let's try this on a simple basic example.  \n",
    "Objective: Let's etimate the probability distribution in a 1-dimensional dataset \n",
    "*  that we generated ourselves using  2 gaussian normal probability distributions.\n",
    "*  Using a Gaussian mixture model with 2 normal gaussian distributions\n",
    "\n",
    "Or in other words, we should be able to find our own mean and standard deviation parameters we used to generate the testset.\n",
    "\n",
    "Note, this notebook is for building the basic conceptual understanding of the EM algorithm. Not to have the best code, the best computable algorithm, etc. I tried to keep it simple.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "2c4a77cfebf99a55462a377ad2930fa6f05eefde"
   },
   "source": [
    "<a id='sec31'></a>\n",
    "## Gaussian Mixture Model of 2 Gaussians\n",
    "Two Normal distributions $N(\\mu_1, \\sigma_1^2)$ and $N(\\mu_2, \\sigma_2^2)$. \n",
    "\n",
    "There are 5 paramaters to estimate: $\\theta = (w, \\mu_1, \\sigma_1^2, \\mu_2, \\sigma_2^2)$ where $w$ is the probability that the data comes from the first normal probability distribution  (and 1-$w$) it comes from the second normal probability distribution) \n",
    "\n",
    "The probability density function (PDF) of the mixture model is:\n",
    "\n",
    "$$f(x | \\theta) = w \\  f_1(x \\ | \\  \\mu_1, \\sigma_1^2) + (1 - w) \\  f_2 (x  \\ | \\  \\mu_2, \\sigma_2^2) $$  \n",
    "\n",
    "Objective is to best fit a given probability density by finding $\\theta = (w, \\mu_1, \\sigma_1^2, \\mu_2, \\sigma_2^2)$ through EM iterations\n",
    "\n",
    "Let try it out (code credits go to [ brianspiering](https://github.com/brianspiering/gaussian_mixture_models/blob/master/intro_to_gmm_%26_em.ipynb))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "_cell_guid": "79c7e3d0-c299-4dcb-8224-4455121ee9b0",
    "_uuid": "d629ff2d2480ee46fbb7e2d37f6b5fab8052498a",
    "execution": {
     "iopub.execute_input": "2024-11-15T07:46:24.186213Z",
     "iopub.status.busy": "2024-11-15T07:46:24.185656Z",
     "iopub.status.idle": "2024-11-15T07:46:25.252071Z",
     "shell.execute_reply": "2024-11-15T07:46:25.250885Z",
     "shell.execute_reply.started": "2024-11-15T07:46:24.185976Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "import done\n"
     ]
    }
   ],
   "source": [
    "# import libraries\n",
    "\n",
    "# For plotting\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "sns.set_style(\"white\")\n",
    "%matplotlib inline\n",
    "#for matrix math\n",
    "import numpy as np\n",
    "#for normalization + probability density function computation\n",
    "from scipy import stats\n",
    "#for data preprocessing\n",
    "import pandas as pd\n",
    "from math import sqrt, log, exp, pi\n",
    "from random import uniform\n",
    "print(\"import done\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "598f2539ced3f159ba773bb33b0e3456c00739ce"
   },
   "source": [
    "# Generate the data yourself \n",
    "Select $\\mu_1, \\sigma_1$ and $\\mu_2, \\sigma_2$ to generate the data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "_uuid": "fc48f5c29294186a1a6a09408e6d7e108653aa4d",
    "execution": {
     "iopub.execute_input": "2024-11-15T07:49:04.793412Z",
     "iopub.status.busy": "2024-11-15T07:49:04.793016Z",
     "iopub.status.idle": "2024-11-15T07:49:05.043546Z",
     "shell.execute_reply": "2024-11-15T07:49:05.042473Z",
     "shell.execute_reply.started": "2024-11-15T07:49:04.793341Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Input Gaussian 1: μ = 2.0, σ = 4.0\n",
      "Input Gaussian 2: μ = 9.0, σ = 2.0\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "random_seed=36788765\n",
    "np.random.seed(random_seed)\n",
    "\n",
    "Mean1 = 2.0  # Input parameter, mean of first normal probability distribution\n",
    "Standard_dev1 = 4.0 #@param {type:\"number\"}\n",
    "Mean2 = 9.0 # Input parameter, mean of second normal  probability distribution\n",
    "Standard_dev2 = 2.0 #@param {type:\"number\"}\n",
    "\n",
    "# generate data\n",
    "y1 = np.random.normal(Mean1, Standard_dev1, 1000)\n",
    "y2 = np.random.normal(Mean2, Standard_dev2, 500)\n",
    "data=np.append(y1,y2)\n",
    "\n",
    "# For data visualisation calculate left and right of the graph\n",
    "Min_graph = min(data)\n",
    "Max_graph = max(data)\n",
    "x = np.linspace(Min_graph, Max_graph, 2000) # to plot the data\n",
    "\n",
    "print('Input Gaussian {:}: μ = {:.2}, σ = {:.2}'.format(\"1\", Mean1, Standard_dev1))\n",
    "print('Input Gaussian {:}: μ = {:.2}, σ = {:.2}'.format(\"2\", Mean2, Standard_dev2))\n",
    "sns.distplot(data, bins=20, kde=False);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "_uuid": "8396cbb53bd12807ec38d131bf17bc78d0ab5fbc",
    "execution": {
     "iopub.execute_input": "2024-11-15T07:49:21.532000Z",
     "iopub.status.busy": "2024-11-15T07:49:21.531609Z",
     "iopub.status.idle": "2024-11-15T07:49:21.542512Z",
     "shell.execute_reply": "2024-11-15T07:49:21.541429Z",
     "shell.execute_reply.started": "2024-11-15T07:49:21.531931Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "done\n"
     ]
    }
   ],
   "source": [
    "class Gaussian:\n",
    "    \"Model univariate Gaussian\"\n",
    "    def __init__(self, mu, sigma):\n",
    "        # mean and standard deviation\n",
    "        self.mu = mu\n",
    "        self.sigma = sigma\n",
    "\n",
    "    # probability density function\n",
    "    def pdf(self, datum):\n",
    "        \"Probability of a data point given the current parameters\"\n",
    "        u = (datum - self.mu) / abs(self.sigma)\n",
    "        y = (1 / (sqrt(2 * pi) * abs(self.sigma))) * exp(-u * u / 2)\n",
    "        return y\n",
    "    \n",
    "    def __repr__(self):\n",
    "        return 'Gaussian({0:4.6}, {1:4.6})'.format(self.mu, self.sigma)\n",
    "print(\"done\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "09fe1994901d7ac9a130698c4148cb00b5c4b1da"
   },
   "source": [
    "<a id='sec32'></a>\n",
    "## A single Gaussion will not fit the data well\n",
    "Calculating the mean and standard deviation of the dataset shows it does not fit well"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "_uuid": "d206d152f8682ae4117a0d436c04747c1095897c",
    "execution": {
     "iopub.execute_input": "2024-11-15T07:49:28.781929Z",
     "iopub.status.busy": "2024-11-15T07:49:28.781580Z",
     "iopub.status.idle": "2024-11-15T07:49:29.077157Z",
     "shell.execute_reply": "2024-11-15T07:49:29.076192Z",
     "shell.execute_reply.started": "2024-11-15T07:49:28.781872Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best single Gaussian: μ = 4.4, σ = 4.8\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# gaussian of best fit\n",
    "best_single = Gaussian(np.mean(data), np.std(data))\n",
    "print('Best single Gaussian: μ = {:.2}, σ = {:.2}'.format(best_single.mu, best_single.sigma))\n",
    "# fit a single gaussian curve to the data\n",
    "g_single = stats.norm(best_single.mu, best_single.sigma).pdf(x)\n",
    "sns.distplot(data, bins=20, kde=False, norm_hist=True);\n",
    "plt.plot(x, g_single, label='single gaussian');\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "be42e26212b2227bde625a210bc11710972bb303"
   },
   "source": [
    "<a id='sec4'></a>\n",
    "# The code for EM with 2 Gaussian mixture model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "_uuid": "605def3ac170f3f8d1892aa54866b17412a1709c",
    "execution": {
     "iopub.execute_input": "2024-11-15T07:51:20.239606Z",
     "iopub.status.busy": "2024-11-15T07:51:20.239235Z",
     "iopub.status.idle": "2024-11-15T07:51:20.271444Z",
     "shell.execute_reply": "2024-11-15T07:51:20.270151Z",
     "shell.execute_reply.started": "2024-11-15T07:51:20.239553Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "done\n"
     ]
    }
   ],
   "source": [
    "class GaussianMixture_self:\n",
    "    \"Model mixture of two univariate Gaussians and their EM estimation\"\n",
    "\n",
    "    def __init__(self, data, mu_min=min(data), mu_max=max(data), sigma_min=1, sigma_max=1, mix=.5):\n",
    "        self.data = data\n",
    "        # todo the Algorithm would be numerical enhanced by normalizing the data first, \n",
    "        # next do all the EM steps and do the de-normalising at the end\n",
    "        \n",
    "        # initialise with multiple gaussians\n",
    "        self.one = Gaussian(uniform(mu_min, mu_max), \n",
    "                            uniform(sigma_min, sigma_max))\n",
    "        self.two = Gaussian(uniform(mu_min, mu_max), \n",
    "                            uniform(sigma_min, sigma_max))\n",
    "        \n",
    "        # parameter to know how much to mix them\n",
    "        self.mix = mix\n",
    "\n",
    "    def Estep(self):\n",
    "        \"\"\"Perform an E(stimation)-step, assign each point to gaussian 1 or 2 with a percentage\"\"\"\n",
    "        # compute weights\n",
    "        self.loglike = 0. # = log(p = 1)\n",
    "        for datum in self.data:  \n",
    "            # unnormalized weights\n",
    "            wp1 = self.one.pdf(datum) * self.mix\n",
    "            wp2 = self.two.pdf(datum) * (1. - self.mix)\n",
    "            # compute denominator\n",
    "            den = wp1 + wp2\n",
    "            # normalize\n",
    "            wp1 /= den   \n",
    "            wp2 /= den     # wp1+wp2= 1, it either belongs to gaussian 1 or gaussion 2\n",
    "            # add into loglike\n",
    "            self.loglike += log(den) #freshening up self.loglike in the process\n",
    "            # yield weight tuple\n",
    "            yield (wp1, wp2)\n",
    "\n",
    "    def Mstep(self, weights):\n",
    "        \"\"\"Perform an (Maximization)-step\"\"\"\n",
    "        # compute denominators\n",
    "        (left, rigt) = zip(*weights) \n",
    "        one_den = sum(left)\n",
    "        two_den = sum(rigt)\n",
    "\n",
    "        # compute new means\n",
    "        self.one.mu = sum(w * d  for (w, d) in zip(left, data)) / one_den\n",
    "        self.two.mu = sum(w * d  for (w, d) in zip(rigt, data)) / two_den\n",
    "        \n",
    "        # compute new sigmas\n",
    "        self.one.sigma = sqrt(sum(w * ((d - self.one.mu) ** 2)\n",
    "                                  for (w, d) in zip(left, data)) / one_den)\n",
    "        self.two.sigma = sqrt(sum(w * ((d - self.two.mu) ** 2)\n",
    "                                  for (w, d) in zip(rigt, data)) / two_den)\n",
    "        # compute new mix\n",
    "        self.mix = one_den / len(data)\n",
    "\n",
    "        \n",
    "    def iterate(self, N=1, verbose=False):\n",
    "        \"Perform N iterations, then compute log-likelihood\"\n",
    "        for i in range(1, N+1):\n",
    "            self.Mstep(self.Estep()) #The heart of the algorith, perform E-stepand next M-step\n",
    "            if verbose:\n",
    "                print('{0:2} {1}'.format(i, self))\n",
    "        self.Estep() # to freshen up self.loglike\n",
    "\n",
    "    def pdf(self, x):\n",
    "        return (self.mix)*self.one.pdf(x) + (1-self.mix)*self.two.pdf(x)\n",
    "        \n",
    "    def __repr__(self):\n",
    "        return 'GaussianMixture({0}, {1}, mix={2.03})'.format(self.one, \n",
    "                                                              self.two, \n",
    "                                                              self.mix)\n",
    "\n",
    "    def __str__(self):\n",
    "        return 'Mixture: {0}, {1}, mix={2:.03})'.format(self.one, \n",
    "                                                        self.two, \n",
    "                                                        self.mix)\n",
    "print(\"done\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='sec41'></a>\n",
    "## See the algorithm in action"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "_uuid": "37cb2937ff2a86a94f9687ec28373c8c13c813d6",
    "execution": {
     "iopub.execute_input": "2024-11-15T07:51:30.832653Z",
     "iopub.status.busy": "2024-11-15T07:51:30.832297Z",
     "iopub.status.idle": "2024-11-15T07:51:31.725727Z",
     "shell.execute_reply": "2024-11-15T07:51:31.724781Z",
     "shell.execute_reply.started": "2024-11-15T07:51:30.832599Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " 1 Mixture: Gaussian(5.5835, 4.33746), Gaussian(1.52116, 4.51378), mix=0.721)\n",
      " 1 Mixture: Gaussian(5.64175, 4.27717), Gaussian(1.39468, 4.53339), mix=0.719)\n",
      " 1 Mixture: Gaussian(5.7035, 4.22981), Gaussian(1.27117, 4.51011), mix=0.717)\n",
      " 1 Mixture: Gaussian(5.76971, 4.18729), Gaussian(1.14617, 4.46086), mix=0.715)\n",
      " 1 Mixture: Gaussian(5.84125, 4.14472), Gaussian(1.01688, 4.39397), mix=0.712)\n",
      " 1 Mixture: Gaussian(5.91885, 4.09919), Gaussian(0.881677, 4.31285), mix=0.708)\n",
      " 1 Mixture: Gaussian(6.00312, 4.04877), Gaussian(0.739855, 4.21845), mix=0.705)\n",
      " 1 Mixture: Gaussian(6.0944, 3.99209), Gaussian(0.591649, 4.11076), mix=0.701)\n",
      " 1 Mixture: Gaussian(6.19264, 3.92811), Gaussian(0.43843, 3.98984), mix=0.697)\n",
      " 1 Mixture: Gaussian(6.29718, 3.85624), Gaussian(0.283055, 3.85671), mix=0.693)\n",
      " 1 Mixture: Gaussian(6.40642, 3.77662), Gaussian(0.130191, 3.71435), mix=0.688)\n",
      " 1 Mixture: Gaussian(6.51768, 3.69055), Gaussian(-0.0137029, 3.56833), mix=0.683)\n",
      " 1 Mixture: Gaussian(6.62729, 3.60089), Gaussian(-0.141104, 3.42673), mix=0.678)\n",
      " 1 Mixture: Gaussian(6.73117, 3.51188), Gaussian(-0.24505, 3.29874), mix=0.673)\n",
      " 1 Mixture: Gaussian(6.82586, 3.42834), Gaussian(-0.321129, 3.19196), mix=0.668)\n",
      " 1 Mixture: Gaussian(6.90953, 3.35409), Gaussian(-0.368733, 3.11015), mix=0.662)\n",
      " 1 Mixture: Gaussian(6.9822, 3.29089), Gaussian(-0.390804, 3.05269), mix=0.657)\n",
      " 1 Mixture: Gaussian(7.04532, 3.23834), Gaussian(-0.392355, 3.01592), mix=0.651)\n",
      " 1 Mixture: Gaussian(7.10093, 3.19469), Gaussian(-0.378805, 2.99503), mix=0.646)\n",
      " 1 Mixture: Gaussian(7.15104, 3.15779), Gaussian(-0.35487, 2.9855), mix=0.64)\n",
      " 1 Mixture: Gaussian(7.19723, 3.12571), Gaussian(-0.324161, 2.98371), mix=0.635)\n",
      " 1 Mixture: Gaussian(7.24068, 3.09695), Gaussian(-0.289222, 2.98703), mix=0.629)\n",
      " 1 Mixture: Gaussian(7.2822, 3.07044), Gaussian(-0.251755, 2.99367), mix=0.624)\n",
      " 1 Mixture: Gaussian(7.32231, 3.04549), Gaussian(-0.212863, 3.00243), mix=0.619)\n",
      " 1 Mixture: Gaussian(7.36134, 3.02162), Gaussian(-0.173246, 3.01257), mix=0.614)\n",
      " 1 Mixture: Gaussian(7.3995, 2.99856), Gaussian(-0.133345, 3.0236), mix=0.608)\n",
      " 1 Mixture: Gaussian(7.43691, 2.97611), Gaussian(-0.0934327, 3.03521), mix=0.603)\n",
      " 1 Mixture: Gaussian(7.47364, 2.95419), Gaussian(-0.0536825, 3.04721), mix=0.598)\n",
      " 1 Mixture: Gaussian(7.50974, 2.93271), Gaussian(-0.0142025, 3.05948), mix=0.593)\n",
      " 1 Mixture: Gaussian(7.54522, 2.91165), Gaussian(0.0249377, 3.07194), mix=0.588)\n",
      " 1 Mixture: Gaussian(7.58009, 2.89099), Gaussian(0.0636925, 3.08453), mix=0.584)\n",
      " 1 Mixture: Gaussian(7.61436, 2.87072), Gaussian(0.102031, 3.09724), mix=0.579)\n",
      " 1 Mixture: Gaussian(7.64802, 2.85084), Gaussian(0.13993, 3.11001), mix=0.574)\n",
      " 1 Mixture: Gaussian(7.68106, 2.83135), Gaussian(0.177373, 3.12285), mix=0.569)\n",
      " 1 Mixture: Gaussian(7.71347, 2.81227), Gaussian(0.214345, 3.13572), mix=0.565)\n",
      " 1 Mixture: Gaussian(7.74525, 2.79359), Gaussian(0.250835, 3.14862), mix=0.56)\n",
      " 1 Mixture: Gaussian(7.77639, 2.77531), Gaussian(0.286832, 3.16153), mix=0.556)\n",
      " 1 Mixture: Gaussian(7.80687, 2.75746), Gaussian(0.322325, 3.17445), mix=0.551)\n",
      " 1 Mixture: Gaussian(7.8367, 2.74003), Gaussian(0.357304, 3.18735), mix=0.547)\n",
      " 1 Mixture: Gaussian(7.86586, 2.72303), Gaussian(0.391761, 3.20023), mix=0.543)\n",
      " 1 Mixture: Gaussian(7.89435, 2.70645), Gaussian(0.425685, 3.21307), mix=0.539)\n",
      " 1 Mixture: Gaussian(7.92218, 2.69031), Gaussian(0.459068, 3.22586), mix=0.535)\n",
      " 1 Mixture: Gaussian(7.94932, 2.67461), Gaussian(0.491903, 3.2386), mix=0.531)\n",
      " 1 Mixture: Gaussian(7.97579, 2.65935), Gaussian(0.524181, 3.25126), mix=0.527)\n",
      " 1 Mixture: Gaussian(8.00158, 2.64452), Gaussian(0.555896, 3.26384), mix=0.523)\n",
      " 1 Mixture: Gaussian(8.0267, 2.63012), Gaussian(0.58704, 3.27632), mix=0.519)\n",
      " 1 Mixture: Gaussian(8.05114, 2.61616), Gaussian(0.617609, 3.2887), mix=0.516)\n",
      " 1 Mixture: Gaussian(8.07492, 2.60262), Gaussian(0.647598, 3.30096), mix=0.512)\n",
      " 1 Mixture: Gaussian(8.09803, 2.58951), Gaussian(0.677001, 3.3131), mix=0.508)\n",
      " 1 Mixture: Gaussian(8.12049, 2.57682), Gaussian(0.705818, 3.3251), mix=0.505)\n"
     ]
    }
   ],
   "source": [
    "# See the algorithm in action\n",
    "n_iterations = 50\n",
    "best_mix = None\n",
    "best_loglike = float('-inf')\n",
    "mix = GaussianMixture_self(data)\n",
    "for _ in range(n_iterations):\n",
    "    try:\n",
    "        #train!\n",
    "        mix.iterate(verbose=True)\n",
    "        if mix.loglike > best_loglike:\n",
    "            best_loglike = mix.loglike\n",
    "            best_mix = mix\n",
    "        \n",
    "    except (ZeroDivisionError, ValueError, RuntimeWarning): # Catch division errors from bad starts, and just throw them out...\n",
    "        print(\"one less\")\n",
    "        pass\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='sec42'></a>\n",
    "## Find best Mixture Gaussian model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "_uuid": "f54ecb1bd2e5bb370c80b1c1d6f5bdcebf3eb076",
    "execution": {
     "iopub.execute_input": "2024-11-15T07:51:51.222750Z",
     "iopub.status.busy": "2024-11-15T07:51:51.222353Z",
     "iopub.status.idle": "2024-11-15T07:52:09.845705Z",
     "shell.execute_reply": "2024-11-15T07:52:09.844691Z",
     "shell.execute_reply.started": "2024-11-15T07:51:51.222675Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Computing best model with random restarts...\n",
      "\n",
      "Input Gaussian 1: μ = 2.0, σ = 4.0\n",
      "Input Gaussian 2: μ = 9.0, σ = 2.0\n",
      "Gaussian 1: μ = 1.8, σ = 3.8, weight = 0.62\n",
      "Gaussian 2: μ = 8.8, σ = 2.2, weight = 0.38\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Find best Mixture Gaussian model\n",
    "n_iterations = 300\n",
    "n_random_restarts = 4\n",
    "best_mix = None\n",
    "best_loglike = float('-inf')\n",
    "print('Computing best model with random restarts...\\n')\n",
    "for _ in range(n_random_restarts):\n",
    "    mix = GaussianMixture_self(data)\n",
    "    for _ in range(n_iterations):\n",
    "        try:\n",
    "            mix.iterate()\n",
    "            if mix.loglike > best_loglike:\n",
    "                best_loglike = mix.loglike\n",
    "                best_mix = mix\n",
    "        except (ZeroDivisionError, ValueError, RuntimeWarning): # Catch division errors from bad starts, and just throw them out...\n",
    "            pass\n",
    "#print('Best Gaussian Mixture : μ = {:.2}, σ = {:.2} with μ = {:.2}, σ = {:.2}'.format(best_mix.one.mu, best_mix.one.sigma, best_mix.two.mu, best_mix.two.sigma))\n",
    "\n",
    "print('Input Gaussian {:}: μ = {:.2}, σ = {:.2}'.format(\"1\", Mean1, Standard_dev1))\n",
    "print('Input Gaussian {:}: μ = {:.2}, σ = {:.2}'.format(\"2\", Mean2, Standard_dev2))\n",
    "print('Gaussian {:}: μ = {:.2}, σ = {:.2}, weight = {:.2}'.format(\"1\", best_mix.one.mu, best_mix.one.sigma, best_mix.mix))\n",
    "print('Gaussian {:}: μ = {:.2}, σ = {:.2}, weight = {:.2}'.format(\"2\", best_mix.two.mu, best_mix.two.sigma, (1-best_mix.mix)))\n",
    "#Show mixture\n",
    "sns.distplot(data, bins=20, kde=False, norm_hist=True);\n",
    "g_both = [best_mix.pdf(e) for e in x]\n",
    "plt.plot(x, g_both, label='gaussian mixture');\n",
    "g_left = [best_mix.one.pdf(e) * best_mix.mix for e in x]\n",
    "plt.plot(x, g_left, label='gaussian one');\n",
    "g_right = [best_mix.two.pdf(e) * (1-best_mix.mix) for e in x]\n",
    "plt.plot(x, g_right, label='gaussian two');\n",
    "plt.legend();\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "fab10e6ee3acf1b9d35e766f9300225b9cfb2a7c"
   },
   "source": [
    "<a id='sec43'></a>\n",
    "## Results\n",
    "The models nicely estimates our own mean entered μ and σ. With this understanding it is not hard to imagine to extend this to n-Gaussians or m-dimensions. You don't need to write complax code since these algorithms have been implemented in some excellent libraries.\n",
    "<a id='sec44'></a>\n",
    "## Further enhancements to the code\n",
    "The Algorithm would be numerical enhanced by normalizing the data first, next do all the EM steps and do the de-normalising at the end. For me (and guess others) I needed to get to base-camp first and get the EM steps understood. \n",
    "<a id='sec5'></a>\n",
    "# sklearn GaussianMixture \n",
    "Or we could make use of a library that already has the functionality implemented. The sklearn GaussianMixture object implements the expectation-maximization (EM) algorithm for fitting mixture-of-Gaussian models.  A GaussianMixture.fit method is provided that learns a Gaussian Mixture Model from train data. Now you can try yourself with n-Gaussians or m-dimensions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "_uuid": "8d2203f981d40741f39d9552f45baba450171b65",
    "execution": {
     "iopub.execute_input": "2024-11-15T07:53:58.716056Z",
     "iopub.status.busy": "2024-11-15T07:53:58.715687Z",
     "iopub.status.idle": "2024-11-15T07:53:59.809421Z",
     "shell.execute_reply": "2024-11-15T07:53:59.808482Z",
     "shell.execute_reply.started": "2024-11-15T07:53:58.716000Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.6/site-packages/sklearn/mixture/base.py:265: ConvergenceWarning: Initialization 1 did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.\n",
      "  % (init + 1), ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Input Gaussian 1: μ = 2.0, σ = 4.0\n",
      "Input Gaussian 2: μ = 9.0, σ = 2.0\n",
      "Gaussian 1: μ = 1.0, σ = 2.1, weight = 0.21\n",
      "Gaussian 2: μ = 9.9, σ = 1.9, weight = 0.2\n",
      "Gaussian 3: μ = -2.5, σ = 2.5, weight = 0.15\n",
      "Gaussian 4: μ = 4.0, σ = 2.1, weight = 0.2\n",
      "Gaussian 5: μ = 7.7, σ = 1.9, weight = 0.24\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.mixture import GaussianMixture\n",
    "gmm = GaussianMixture(n_components = 5, tol=0.000001)\n",
    "gmm.fit(np.expand_dims(data, 1)) # Parameters: array-like, shape (n_samples, n_features), 1 dimension dataset so 1 feature\n",
    "Gaussian_nr = 1\n",
    "print('Input Gaussian {:}: μ = {:.2}, σ = {:.2}'.format(\"1\", Mean1, Standard_dev1))\n",
    "print('Input Gaussian {:}: μ = {:.2}, σ = {:.2}'.format(\"2\", Mean2, Standard_dev2))\n",
    "for mu, sd, p in zip(gmm.means_.flatten(), np.sqrt(gmm.covariances_.flatten()), gmm.weights_):\n",
    "    print('Gaussian {:}: μ = {:.2}, σ = {:.2}, weight = {:.2}'.format(Gaussian_nr, mu, sd, p))\n",
    "    g_s = stats.norm(mu, sd).pdf(x) * p\n",
    "    plt.plot(x, g_s, label='gaussian sklearn');\n",
    "    Gaussian_nr += 1\n",
    "sns.distplot(data, bins=20, kde=False, norm_hist=True)\n",
    "gmm_sum = np.exp([gmm.score_samples(e.reshape(-1, 1)) for e in x]) #gmm gives log probability, hence the exp() function\n",
    "plt.plot(x, gmm_sum, label='gaussian mixture');\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "01733447abb25ad754e0cbc9f7df2c2b466dd98c"
   },
   "source": [
    "<a id='sec6'></a>\n",
    "# If you want to explore this subject further\n",
    "\n",
    "If you want to have a more formal understand of Gaussian mixture, I would recommend:  \n",
    "https://www.youtube.com/watch?v=4vGiHC35j9s   \n",
    "if you want to have a less formal, please watch:  \n",
    "https://www.youtube.com/watch?v=JNlEIEwe-Cg  \n",
    "EM Demystified: An Expectation-Maximization Tutorial:  \n",
    "https://vannevar.ece.uw.edu/techsite/papers/documents/UWEETR-2010-0002.pdf  \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hope you liked my notebook (upvote top right), my way to conribute back to this fantastic Kaggle platform and community.\n",
    "\n",
    "The reason why I needed to understand expectation Maximization is because it was mentioned in research work on biological inspired true artificial intelligence where neuroscience produced a candidate which suggests that several global brain theories might be unified within a free-energy framework: Free Energy Principle (FEP) by Karl Friston: The free-energy principle is an attempt to explain the structure and function of the brain, starting from the very fact that we exist. \n",
    "Curious? See my notebook:  \n",
    "https://www.kaggle.com/charel/learn-by-example-active-inference-in-the-brain-1\n",
    " "
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 29661,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
