{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.6.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":120,"sourceType":"datasetVersion","datasetId":55},{"sourceId":291342,"sourceType":"datasetVersion","datasetId":121008},{"sourceId":9903051,"sourceType":"datasetVersion","datasetId":6083683}],"dockerImageVersionId":22192,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nfrom scipy.stats import multivariate_normal as mvn\nimport math\n\nfrom numpy.linalg import slogdet, det, solve\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\nimport time\n\nfrom sklearn.datasets import load_digits\nfrom sklearn.mixture.base import BaseMixture\nfrom sklearn.cluster import KMeans\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import normalize\n\nimport os, sys, email,re\nfrom nltk.corpus import stopwords\nprint(os.listdir(\"../input\"))\n\n# Any results you write to the current directory are saved as output.","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-11-14T08:31:24.571923Z","iopub.execute_input":"2024-11-14T08:31:24.572258Z","iopub.status.idle":"2024-11-14T08:31:24.581299Z","shell.execute_reply.started":"2024-11-14T08:31:24.572195Z","shell.execute_reply":"2024-11-14T08:31:24.580352Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"['enron-email-dataset']\n","output_type":"stream"}]},{"cell_type":"code","source":"# Import necessary libraries for generating synthetic data\nimport numpy as np\n# Re-create the directory structure and save the synthetic file in the specified location\nimport os\n\n# Set random seed for reproducibility\nnp.random.seed(42)\n\n# Define parameters for a Gaussian Mixture Model (GMM) to generate synthetic data\n# Assuming 2 Gaussian components with distinct centers and covariances\n\n# Number of samples\nnum_samples = 300\n\n# Mixture weights for two components\npi0 = np.array([0.55, 0.45])\n\n# Means of the two components\nmu0 = np.array([[0, 0], [2, 3]])\n\n# Covariance matrices for the two components\nsigma0 = np.array([[[1.0, 0.3], [0.3, 0.5]],\n                   [[0.5, -0.2], [-0.2, 0.8]]])\n\n# Generate samples for each component based on the mixture weights\nsamples = []\nfor i in range(2):\n    num_samples_i = int(pi0[i] * num_samples)\n    component_samples = np.random.multivariate_normal(mu0[i], sigma0[i], num_samples_i)\n    samples.append(component_samples)\n\n# Combine samples from both components\nX = np.vstack(samples)\n\n# Define the target directory and create it if it doesn't exist\ntarget_dir = '/mnt/data/input/samples/'\nos.makedirs(target_dir, exist_ok=True)\n\n# Save the generated data, mixture weights, means, and covariances into the specified path\nnp.savez(f'{target_dir}/samples.npz', data=X, pi0=pi0, mu0=mu0, sigma0=sigma0)\n\n# # Confirm the file path\n# f'{target_dir}/samples.npz'\n\n\n# Save the generated data, mixture weights, means, and covariances into an npz file\n# np.savez('/mnt/data/samples.npz', data=X, pi0=pi0, mu0=mu0, sigma0=sigma0)\n\n# Plotting the generated samples to check if they resemble the provided image\nimport matplotlib.pyplot as plt\n\nplt.style.use('fivethirtyeight')\nplt.scatter(X[:, 0], X[:, 1], c='grey', s=30)\nplt.axis('equal')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-11-14T08:37:16.333983Z","iopub.execute_input":"2024-11-14T08:37:16.334342Z","iopub.status.idle":"2024-11-14T08:37:16.496592Z","shell.execute_reply.started":"2024-11-14T08:37:16.334290Z","shell.execute_reply":"2024-11-14T08:37:16.495722Z"},"trusted":true},"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":"samples = np.load('/kaggle/input/d/newmlpractioner/samples/samples.npz')\nX = samples['data']\npi0 = samples['pi0']\nmu0 = samples['mu0']\nsigma0 = samples['sigma0']\nplt.scatter(X[:, 0], X[:, 1], c='grey', s=30)\nplt.axis('equal')\nplt.show()\nprint(pi0, mu0)","metadata":{"_uuid":"0874d78483ef758e105cc7214aa7bae3f65984d7","execution":{"iopub.status.busy":"2024-11-14T08:35:57.542386Z","iopub.execute_input":"2024-11-14T08:35:57.542762Z","iopub.status.idle":"2024-11-14T08:35:57.801759Z","shell.execute_reply.started":"2024-11-14T08:35:57.542688Z","shell.execute_reply":"2024-11-14T08:35:57.800515Z"},"trusted":true},"execution_count":7,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"[0.6 0.4] [[0 0]\n [2 3]]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# GMM should produce something similar","metadata":{"_uuid":"48ae0a0454b2b70b6e3b6e0796b3a6caa532faa2"}},{"cell_type":"code","source":"kmeans_test = KMeans(n_clusters= 3, init=\"k-means++\", max_iter=500, algorithm = 'auto')\nfitted = kmeans_test.fit(X)\nprediction = kmeans_test.predict(X)\nplt.scatter(X[:, 0], X[:, 1], c=prediction, s=30)\nplt.axis('equal')\nplt.show()\n\nkmeans_test.cluster_centers_","metadata":{"_uuid":"883efab9d215144ad8eef6d411a225d2134a21c5","execution":{"iopub.status.busy":"2024-11-14T08:36:05.680566Z","iopub.execute_input":"2024-11-14T08:36:05.680889Z","iopub.status.idle":"2024-11-14T08:36:06.002363Z","shell.execute_reply.started":"2024-11-14T08:36:05.680836Z","shell.execute_reply":"2024-11-14T08:36:06.001200Z"},"trusted":true},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"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\n"},"metadata":{}},{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"array([[ 0.836906  ,  0.42122381],\n       [ 1.97983769,  3.00844459],\n       [-0.60232268, -0.28957325]])"},"metadata":{}}]},{"cell_type":"code","source":"plt.figure(figsize = (10,8))\nfrom scipy.spatial.distance import cdist\ndef plot_kmeans(kmeans, X, n_clusters=4, rseed=0, ax=None):\n    labels = kmeans.fit_predict(X)\n\n    # plot the input data\n    ax = ax or plt.gca()\n    ax.axis('equal')\n    ax.scatter(X[:, 0], X[:, 1], c=labels, s=40, cmap='viridis', zorder=2)\n\n    # plot the representation of the KMeans model\n    centers = kmeans.cluster_centers_\n    radii = [cdist(X[labels == i], [center]).max()\n             for i, center in enumerate(centers)]\n    for c, r in zip(centers, radii):\n        ax.add_patch(plt.Circle(c, r, fc='#CCCCCC', lw=3, alpha=0.5, zorder=1))\n        \nplot_kmeans(kmeans_test, X)","metadata":{"_uuid":"19f44c4e86f573544fe4c46b7666e5f18088a4d4","execution":{"iopub.status.busy":"2024-11-14T08:37:24.195946Z","iopub.execute_input":"2024-11-14T08:37:24.196301Z","iopub.status.idle":"2024-11-14T08:37:24.710163Z","shell.execute_reply.started":"2024-11-14T08:37:24.196234Z","shell.execute_reply":"2024-11-14T08:37:24.709179Z"},"trusted":true},"execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 720x576 with 1 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":"# GMM sklearn","metadata":{"_uuid":"b662401740fc9a0c9690be0d19e48548be0d24ee"}},{"cell_type":"code","source":"from sklearn.mixture import GaussianMixture\ngmm = GaussianMixture(n_components=3).fit(X)\nlabels = gmm.predict(X)\nplt.scatter(X[:, 0], X[:, 1], c=labels, s=40, cmap='viridis');\nprobs = gmm.predict_proba(X)\n# print(probs[:5].round(3))","metadata":{"_uuid":"e62caa139068ffe2a162cc05805b4501b9938adf","execution":{"iopub.status.busy":"2024-11-14T09:02:37.441560Z","iopub.execute_input":"2024-11-14T09:02:37.442613Z","iopub.status.idle":"2024-11-14T09:02:37.848127Z","shell.execute_reply.started":"2024-11-14T09:02:37.442441Z","shell.execute_reply":"2024-11-14T09:02:37.846683Z"},"trusted":true},"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":"print(gmm._get_parameters()[0])\nprint(gmm._get_parameters()[1])\ngmm.lower_bound_\n# kmeans mean values\n# array([[1.20514208, 5.82885457],\n#        [0.9733235 , 0.94371856],\n#        [6.40546402, 4.50975916]])","metadata":{"_uuid":"c6039b3e36a59fa9ec4447fcaf60624dcaf96d1f","execution":{"iopub.status.busy":"2024-11-14T09:02:56.232024Z","iopub.execute_input":"2024-11-14T09:02:56.232409Z","iopub.status.idle":"2024-11-14T09:02:56.243209Z","shell.execute_reply.started":"2024-11-14T09:02:56.232340Z","shell.execute_reply":"2024-11-14T09:02:56.242151Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"[0.31868036 0.45729531 0.22402433]\n[[-0.53542709 -0.18262929]\n [ 1.970868    2.92656974]\n [ 0.65080585  0.28649783]]\n","output_type":"stream"},{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"-2.941101275550523"},"metadata":{}}]},{"cell_type":"markdown","source":"# Test Functions from class","metadata":{"_uuid":"d7a1695b416890a82b99c824540e28bdae201ec8"}},{"cell_type":"code","source":"def calculate_mean_covariance(X, prediction):\n    C = 3\n    d = X.shape[1]\n    labels = np.unique(prediction)\n    initial_means = np.zeros((C, d))\n    initial_cov = np.zeros((C, d, d))\n    initial_pi = np.zeros(C)\n        \n    counter=0\n    for label in sorted(labels):\n        ids = np.where(prediction == label) # returns indices\n        initial_pi[counter] = len(ids[0]) / X.shape[0] \n        initial_means[counter,:] = np.mean(X[ids], axis = 0)\n        de_meaned = X[ids] - initial_means[counter,:]\n        Nk = X[ids].shape[0]\n        initial_cov[counter,:, :] = np.dot(initial_pi[counter] * de_meaned.T, de_meaned) / Nk\n        counter+=1\n    assert np.sum(initial_pi) == 1\n    return (initial_means, initial_cov, initial_pi)\n    \nn_clusters = 3\nkmeans = KMeans(n_clusters= n_clusters, max_iter=500, algorithm = 'auto')\nfitted = kmeans.fit(X)\nprediction = kmeans.predict(X)\n\nm, c, pi = calculate_mean_covariance(X, prediction)","metadata":{"_uuid":"03b90668c7c6e05986c939982060608b6d5e20dd","execution":{"iopub.status.busy":"2024-11-14T09:18:52.851661Z","iopub.execute_input":"2024-11-14T09:18:52.852009Z","iopub.status.idle":"2024-11-14T09:18:52.899214Z","shell.execute_reply.started":"2024-11-14T09:18:52.851959Z","shell.execute_reply":"2024-11-14T09:18:52.898164Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"print(m)\nprint(c)\nprint(pi)","metadata":{"execution":{"iopub.status.busy":"2024-11-14T09:27:52.494657Z","iopub.execute_input":"2024-11-14T09:27:52.495051Z","iopub.status.idle":"2024-11-14T09:27:52.501948Z","shell.execute_reply.started":"2024-11-14T09:27:52.494972Z","shell.execute_reply":"2024-11-14T09:27:52.500791Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"[[ 1.96530945  3.00173173]\n [ 0.83690559  0.43939355]\n [-0.65320857 -0.2862595 ]]\n[[[ 0.20384737 -0.10020429]\n  [-0.10020429  0.3288556 ]]\n\n [[ 0.09666426  0.00547793]\n  [ 0.00547793  0.05866589]]\n\n [[ 0.11694512  0.00427111]\n  [ 0.00427111  0.1384043 ]]]\n[0.44       0.25333333 0.30666667]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# New E-Step","metadata":{"_uuid":"7463eeda8534ff2dfa093c58217e57891a4e4257","trusted":true}},{"cell_type":"code","source":"class GMM:\n    \"\"\" Gaussian Mixture Model\n    \n    Parameters\n    -----------\n        k: int , number of gaussian distributions\n        \n        seed: int, will be randomly set if None\n        \n        max_iter: int, number of iterations to run algorithm, default: 200\n        \n    Attributes\n    -----------\n       centroids: array, k, number_features\n       \n       cluster_labels: label for each data point\n       \n    \"\"\"\n    def __init__(self, C, n_runs):\n        self.C = C # number of Guassians/clusters\n        self.n_runs = n_runs\n        \n    \n    def get_params(self):\n        return (self.mu, self.pi, self.sigma)\n    \n    \n        \n    def calculate_mean_covariance(self, X, prediction):\n        \"\"\"Calculate means and covariance of different\n            clusters from k-means prediction\n        \n        Parameters:\n        ------------\n        prediction: cluster labels from k-means\n        \n        X: N*d numpy array data points \n        \n        Returns:\n        -------------\n        intial_means: for E-step of EM algorithm\n        \n        intial_cov: for E-step of EM algorithm\n        \n        \"\"\"\n        d = X.shape[1]\n        labels = np.unique(prediction)\n        self.initial_means = np.zeros((self.C, d))\n        self.initial_cov = np.zeros((self.C, d, d))\n        self.initial_pi = np.zeros(self.C)\n        \n        counter=0\n        for label in labels:\n            ids = np.where(prediction == label) # returns indices\n            self.initial_pi[counter] = len(ids[0]) / X.shape[0]\n            self.initial_means[counter,:] = np.mean(X[ids], axis = 0)\n            de_meaned = X[ids] - self.initial_means[counter,:]\n            Nk = X[ids].shape[0] # number of data points in current gaussian\n            self.initial_cov[counter,:, :] = np.dot(self.initial_pi[counter] * de_meaned.T, de_meaned) / Nk\n            counter+=1\n        assert np.sum(self.initial_pi) == 1    \n            \n        return (self.initial_means, self.initial_cov, self.initial_pi)\n    \n    \n    \n    def _initialise_parameters(self, X):\n        \"\"\"Implement k-means to find starting\n            parameter values.\n            https://datascience.stackexchange.com/questions/11487/how-do-i-obtain-the-weight-and-variance-of-a-k-means-cluster\n\n        Parameters:\n        ------------\n        X: numpy array of data points\n        \n        Returns:\n        ----------\n        tuple containing initial means and covariance\n        \n        _initial_means: numpy array: (C*d)\n        \n        _initial_cov: numpy array: (C,d*d)\n        \n        \n        \"\"\"\n        n_clusters = self.C\n        kmeans = KMeans(n_clusters= n_clusters, init=\"k-means++\", max_iter=500, algorithm = 'auto')\n        fitted = kmeans.fit(X)\n        prediction = kmeans.predict(X)\n        self._initial_means, self._initial_cov, self._initial_pi = self.calculate_mean_covariance(X, prediction)\n        \n        \n        return (self._initial_means, self._initial_cov, self._initial_pi)\n            \n        \n        \n    def _e_step(self, X, pi, mu, sigma):\n        \"\"\"Performs E-step on GMM model\n\n        Parameters:\n        ------------\n        X: (N x d), data points, m: no of features\n        pi: (C), weights of mixture components\n        mu: (C x d), mixture component means\n        sigma: (C x d x d), mixture component covariance matrices\n\n        Returns:\n        ----------\n        gamma: (N x C), probabilities of clusters for objects\n        \"\"\"\n        N = X.shape[0] \n        self.gamma = np.zeros((N, self.C))\n\n        const_c = np.zeros(self.C)\n        \n        \n        self.mu = self.mu if self._initial_means is None else self._initial_means\n        self.pi = self.pi if self._initial_pi is None else self._initial_pi\n        self.sigma = self.sigma if self._initial_cov is None else self._initial_cov\n\n        for c in range(self.C):\n            # Posterior Distribution using Bayes Rule\n            self.gamma[:,c] = self.pi[c] * mvn.pdf(X, self.mu[c,:], self.sigma[c])\n\n        # normalize across columns to make a valid probability\n        gamma_norm = np.sum(self.gamma, axis=1)[:,np.newaxis]\n        self.gamma /= gamma_norm\n\n        return self.gamma\n    \n    \n    def _m_step(self, X, gamma):\n        \"\"\"Performs M-step of the GMM\n        We need to update our priors, our means\n        and our covariance matrix.\n\n        Parameters:\n        -----------\n        X: (N x d), data \n        gamma: (N x C), posterior distribution of lower bound \n\n        Returns:\n        ---------\n        pi: (C)\n        mu: (C x d)\n        sigma: (C x d x d)\n        \"\"\"\n        N = X.shape[0] # number of objects\n        C = self.gamma.shape[1] # number of clusters\n        d = X.shape[1] # dimension of each object\n\n        # responsibilities for each gaussian\n        self.pi = np.mean(self.gamma, axis = 0)\n\n        self.mu = np.dot(self.gamma.T, X) / np.sum(self.gamma, axis = 0)[:,np.newaxis]\n\n        for c in range(C):\n            x = X - self.mu[c, :] # (N x d)\n            \n            gamma_diag = np.diag(self.gamma[:,c])\n            x_mu = np.matrix(x)\n            gamma_diag = np.matrix(gamma_diag)\n\n            sigma_c = x.T * gamma_diag * x\n            self.sigma[c,:,:]=(sigma_c) / np.sum(self.gamma, axis = 0)[:,np.newaxis][c]\n\n        return self.pi, self.mu, self.sigma\n    \n    \n    def _compute_loss_function(self, X, pi, mu, sigma):\n        \"\"\"Computes lower bound loss function\n        \n        Parameters:\n        -----------\n        X: (N x d), data \n        \n        Returns:\n        ---------\n        pi: (C)\n        mu: (C x d)\n        sigma: (C x d x d)\n        \"\"\"\n        N = X.shape[0]\n        C = self.gamma.shape[1]\n        self.loss = np.zeros((N, C))\n\n        for c in range(C):\n            dist = mvn(self.mu[c], self.sigma[c],allow_singular=True)\n            self.loss[:,c] = self.gamma[:,c] * (np.log(self.pi[c]+0.00001)+dist.logpdf(X)-np.log(self.gamma[:,c]+0.000001))\n        self.loss = np.sum(self.loss)\n        return self.loss\n    \n    \n    \n    def fit(self, X):\n        \"\"\"Compute the E-step and M-step and\n            Calculates the lowerbound\n        \n        Parameters:\n        -----------\n        X: (N x d), data \n        \n        Returns:\n        ----------\n        instance of GMM\n        \n        \"\"\"\n        \n        d = X.shape[1]\n        self.mu, self.sigma, self.pi =  self._initialise_parameters(X)\n        \n        try:\n            for run in range(self.n_runs):  \n                self.gamma  = self._e_step(X, self.mu, self.pi, self.sigma)\n                self.pi, self.mu, self.sigma = self._m_step(X, self.gamma)\n                loss = self._compute_loss_function(X, self.pi, self.mu, self.sigma)\n                \n                if run % 10 == 0:\n                    print(\"Iteration: %d Loss: %0.6f\" %(run, loss))\n\n        \n        except Exception as e:\n            print(e)\n            \n        \n        return self\n    \n    \n    \n    \n    def predict(self, X):\n        \"\"\"Returns predicted labels using Bayes Rule to\n        Calculate the posterior distribution\n        \n        Parameters:\n        -------------\n        X: ?*d numpy array\n        \n        Returns:\n        ----------\n        labels: predicted cluster based on \n        highest responsibility gamma.\n        \n        \"\"\"\n        labels = np.zeros((X.shape[0], self.C))\n        \n        for c in range(self.C):\n            labels [:,c] = self.pi[c] * mvn.pdf(X, self.mu[c,:], self.sigma[c])\n        labels  = labels .argmax(1)\n        return labels \n    \n    def predict_proba(self, X):\n        \"\"\"Returns predicted labels\n        \n        Parameters:\n        -------------\n        X: N*d numpy array\n        \n        Returns:\n        ----------\n        labels: predicted cluster based on \n        highest responsibility gamma.\n        \n        \"\"\"\n        post_proba = np.zeros((X.shape[0], self.C))\n        \n        for c in range(self.C):\n            # Posterior Distribution using Bayes Rule, try and vectorise\n            post_proba[:,c] = self.pi[c] * mvn.pdf(X, self.mu[c,:], self.sigma[c])\n    \n        return post_proba","metadata":{"_uuid":"4728e6fe58255084e0e4106a5d5a2977ac6d18ce","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Test GMM class\n- class working \n- same as sklearn implementation","metadata":{"_uuid":"77e4cb8868820f2a9b122821aff2f10ce14027bc"}},{"cell_type":"code","source":"model = GMM(3, n_runs = 100)\n\nfitted_values = model.fit(X)\n\npredicted_values = model.predict(X)\n# compute centers as point of highest density of distribution\ncenters = np.zeros((3,2))\nfor i in range(model.C):\n    density = mvn(cov=model.sigma[i], mean=model.mu[i]).logpdf(X)\n    centers[i, :] = X[np.argmax(density)]\n    \nplt.figure(figsize = (10,8))\nplt.scatter(X[:, 0], X[:, 1],c=predicted_values ,s=50, cmap='viridis')\n\nplt.scatter(centers[:, 0], centers[:, 1],c='black', s=300, alpha=0.6);\n","metadata":{"_uuid":"335fd741870199f110558f56b076ad28bf047b21","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Compare sklearn and my own and test predict method","metadata":{"_uuid":"a210dfd496eba15c2e6a93c175c5b2f9b682b4a8"}},{"cell_type":"code","source":"# print(\"initial means: \", model._initial_means)\n# print('--------------------------')\n# print(\"initial pi: \", model._initial_pi)\n# print('--------------------------')\n# print('GMM means: ', model.get_params()[1])\n# print('--------------------------')\n# print('GMM pi: ', model.get_params()[0])\n# print('--------------------------')\n# print('sklearn GMM means: ', gmm._get_parameters()[1])\n# print('--------------------------')\n# print('sklearn GMM pi: ', gmm._get_parameters()[0])","metadata":{"_uuid":"4612033776bc5f5f4e3230f16cb782898e479baa","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Plot clusters","metadata":{"_uuid":"237e5aee7327fb9bc4421b4fc7aa7c39b6c6f98d"}},{"cell_type":"code","source":"# Credit to python data science handbook for the code to plot these distributions\nfrom matplotlib.patches import Ellipse\n\ndef draw_ellipse(position, covariance, ax=None, **kwargs):\n    \"\"\"Draw an ellipse with a given position and covariance\"\"\"\n    ax = ax or plt.gca()\n    \n    # Convert covariance to principal axes\n    if covariance.shape == (2, 2):\n        U, s, Vt = np.linalg.svd(covariance)\n        angle = np.degrees(np.arctan2(U[1, 0], U[0, 0]))\n        width, height = 2 * np.sqrt(s)\n    else:\n        angle = 0\n        width, height = 2 * np.sqrt(covariance)\n    \n    # Draw the Ellipse\n    for nsig in range(1, 4):\n        ax.add_patch(Ellipse(position, nsig * width, nsig * height,\n                             angle, **kwargs))\n        ","metadata":{"_uuid":"35daa5a8fc5de7976fc708f0be556b3caace0be3","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Draw Distributions around GMM clusters","metadata":{"_uuid":"0fa540f751aa42023a7593c65541efe5a72f0aa1"}},{"cell_type":"code","source":"plt.figure(figsize = (10,8))\nplt.scatter(X[:, 0], X[:, 1],c=predicted_values ,s=50, cmap='viridis')\nplt.scatter(centers[:, 0], centers[:, 1],c='black', s=300, alpha=0.6);\n\nw_factor = 0.2 / model.pi.max()\nfor pos, covar, w in zip(model.mu, model.sigma, model.pi):\n    draw_ellipse(pos, covar, alpha=w * w_factor)","metadata":{"_uuid":"8eb1e661860efe14ef86fbd12df0c56784ca28e3","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def E_step(X, pi, mu, sigma):\n    \"\"\"Performs E-step on GMM model\n\n        Parameters:\n        ------------\n        X: (N x m), data points, m: no of features\n        pi: (C), weights of mixture components\n        mu: (C x m), mixture component means\n        sigma: (C x m x m), mixture component covariance matrices\n\n        Returns:\n        ----------\n        gamma: (N x C), probabilities of clusters for objects\n        \"\"\"\n    \n    N = X.shape[0] \n    C = pi0.shape[0] # number of clusters\n    gamma = np.zeros((N, C))\n\n    const_c = np.zeros(C)\n\n    for c in range(C):\n#         pi_c = pi0[c]\n#         mu_c = mu0[c, :] \n#         sigma_c = sigma0[c] \n\n        # Posterior Distribution using Bayes Rule\n        gamma[:,c] = pi0[c] * mvn.pdf(X, mu0[c,:], sigma0[c])\n\n    # normalize across columns to make a valid probability\n    gamma_norm = np.sum(gamma, axis=1)[:,np.newaxis]\n    gamma /= gamma_norm\n\n    return gamma\n\ngamma = E_step(X, pi0, mu0, sigma0)\nprint(np.sum(gamma, axis=0))","metadata":{"_uuid":"37a0a26dd125206377f6c7789bb69fa5fe9ca1a2","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# M Step","metadata":{"_uuid":"a179421a7a579ec21193df0c297bc049f2f425c8"}},{"cell_type":"code","source":"def M_step(X, gamma):\n    \"\"\"Performs M-step of the GMM\n    We need to update our priors, our means\n    and our covariance matrix.\n    \n    Parameters:\n    -----------\n    X: (N x d), data \n    gamma: (N x C), posterior distribution of lower bound \n    \n    Returns:\n    ---------\n    pi: (C)\n    mu: (C x d)\n    sigma: (C x d x d)\n    \"\"\"\n    N = X.shape[0] # number of objects\n    C = gamma.shape[1] # number of clusters\n    d = X.shape[1] # dimension of each object\n\n    ### YOUR CODE HERE\n    mu = np.zeros((C, d))\n    sigma = np.zeros((C, d, d))\n    \n    # responsibilities for each gaussian\n    pi = np.mean(gamma, axis = 0)\n    mu = np.dot(gamma.T, X) / np.sum(gamma, axis = 0)[:,np.newaxis]\n     \n    for c in range(C): # for each Gaussian\n        x_mu = X - mu[c, :] # (N x d)\n        \n        gamma_diag = np.diag(gamma[:,c])\n        x_mu = np.matrix(x_mu)\n        gamma_diag = np.matrix(gamma_diag)\n        \n        sigma_c = x_mu.T * gamma_diag * x_mu\n        sigma[c,:,:]=(sigma_c) / np.sum(gamma, axis = 0)[:,np.newaxis][c]\n    \n    return pi, mu, sigma\npi, mu, sigma = M_step(X, gamma)\nprint(pi, mu, sigma)","metadata":{"_uuid":"ddb4dfbb110c920ea2aa76a24137ac90593bef0d","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Variational Lower Bound\n$$\\mathcal{L} = \\sum_{n=1}^{N} \\sum_{k=1}^{K} \\mathbb{E}[z_{n, k}] (\\log \\pi_k + \\log \\mathcal{N}(x_n | \\mu_k, \\sigma_k)) - \\sum_{n=1}^{N} \\sum_{k=1}^{K} \\mathbb{E}[z_{n, k}] \\log \\mathbb{E}[z_{n, k}]$$","metadata":{"_uuid":"7cabb3d25a1f0f26273e3aca274a93fb4eb8d61b"}},{"cell_type":"code","source":"def compute_loss_function(X, gamma, pi, mu, sigma):\n    N = X.shape[0]\n    C = gamma.shape[1]\n    loss = np.zeros((N,C))\n    \n    for c in range(C):\n        dist = mvn(mu[c], sigma[c],allow_singular=True)\n        loss[:,c] = gamma[:,c] * (np.log(pi[c]+0.00001)+dist.logpdf(X)-np.log(gamma[:,c]+0.000001))\n\n    return np.sum(loss)","metadata":{"_uuid":"9a707495e8dc658f1770a8066fe0ad602b145570","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"compute_loss_function(X, gamma, pi, mu, sigma)","metadata":{"_uuid":"c54a68c0a3a6f447836c43eb0cd820aea307c4cd","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Test all functions\n- seem to be correct. Class implmentation doesnt give same answer\n- Could be because I have an incorrect initialisation","metadata":{"_uuid":"7f56a3676e67386b1083bfa58b7601ca65bc66c6","trusted":true}},{"cell_type":"code","source":"pi, mu, sigma = pi0, mu0, sigma0\ngamma = E_step(X, pi, mu, sigma)\npi, mu, sigma = M_step(X, gamma)\nloss = compute_loss_function(X, gamma, pi, mu, sigma)","metadata":{"_uuid":"b4ad2c4b0d6c9bcb124569bf747a232f74fc4255","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Test on Enron data set","metadata":{"_uuid":"aacf849fc91bebc04a99f34f19f661a989aa7a98"}},{"cell_type":"markdown","source":"# Read in Data and Preprocess","metadata":{"_uuid":"01168ca295c2f4e7e7b69787384a91ffe4256471"}},{"cell_type":"code","source":"df = pd.read_csv('../input/enron-email-dataset/emails.csv',nrows = 35000)","metadata":{"_uuid":"8afa023c4fd5416ad1bc4d6cc0d4ac24995ed4e4","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# create list of email objects\nemails = list(map(email.parser.Parser().parsestr,df['message']))\n\n# extract headings such as subject, from, to etc..\nheadings  = emails[0].keys()\n\n# Goes through each email and grabs info for each key\n# doc['From'] grabs who sent email in all emails\nfor key in headings:\n    df[key] = [doc[key] for doc in emails]\n\n    \n##Useful functions\ndef get_raw_text(emails):\n    email_text = []\n    for email in emails.walk():\n        if email.get_content_type() == 'text/plain':\n            email_text.append(email.get_payload())\n    return ''.join(email_text)\n\ndf['body'] = list(map(get_raw_text, emails))\ndf.head()\ndf['user'] = df['file'].map(lambda x: x.split('/')[0])\n\n\n#Unique to and From\nprint('Total number of emails: %d' %len(df))\nprint('------------')\nprint('Number of unique received: %d '%df['To'].nunique())\nprint('------------')\nprint('Number of unique Sent: %d '%df['From'].nunique())\n\n\ndef clean_column(data):\n    if data is not None:\n        stopwords_list = stopwords.words('english')\n        #exclusions = ['RE:', 'Re:', 're:']\n        #exclusions = '|'.join(exclusions)\n        data =  data.lower()\n        data = re.sub('re:', '', data)\n        data = re.sub('-', '', data)\n        data = re.sub('_', '', data)\n        # Remove data between square brackets\n        data =re.sub('\\[[^]]*\\]', '', data)\n        # removes punctuation\n        data = re.sub(r'[^\\w\\s]','',data)\n        data = re.sub(r'\\n',' ',data)\n        data = re.sub(r'[0-9]+','',data)\n        # strip html \n        p = re.compile(r'<.*?>')\n        data = re.sub(r\"\\'ve\", \" have \", data)\n        data = re.sub(r\"can't\", \"cannot \", data)\n        data = re.sub(r\"n't\", \" not \", data)\n        data = re.sub(r\"I'm\", \"I am\", data)\n        data = re.sub(r\" m \", \" am \", data)\n        data = re.sub(r\"\\'re\", \" are \", data)\n        data = re.sub(r\"\\'d\", \" would \", data)\n        data = re.sub(r\"\\'ll\", \" will \", data)\n        data = re.sub('forwarded by phillip k allenhouect on    pm', '',data)\n        data = re.sub(r\"httpitcappscorpenroncomsrrsauthemaillinkaspidpage\", \"\", data)\n        \n        data = p.sub('', data)\n        if 'forwarded by:' in data:\n            data = data.split('subject')[1]\n        data = data.strip()\n        return data\n    return 'No Subject'\n\n\ndf['Subject_new'] = df['Subject'].apply(clean_column)\ndf['body_new'] = df['body'].apply(clean_column)\n\n\nfrom wordcloud import WordCloud, STOPWORDS\nstopwords = set(STOPWORDS)\nto_add = ['FW', 'ga', 'httpitcappscorpenroncomsrrsauthemaillinkaspidpage', 'cc', 'aa', 'aaa', 'aaaa',\n         'hou', 'cc', 'etc', 'subject', 'pm']\n\nfor i in to_add:\n    stopwords.add(i)","metadata":{"_uuid":"4ff343f85c5a89869f7f49e8ea3dcad283824f4d","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# TF-IDF","metadata":{"_uuid":"459f5001e576feda674d3e9276f1aef0aabd84ad"}},{"cell_type":"code","source":"df['body_new'].head()","metadata":{"_uuid":"85c0ca262dddba739c95544bd0193a907d3e87f5","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.feature_extraction.text import TfidfVectorizer\ndata = df['body_new']\n# data.head()\n\ntf_idf_vectorizor = TfidfVectorizer(stop_words = stopwords,#tokenizer = tokenize_and_stem,\n                             max_features = 5000)\n%time tf_idf = tf_idf_vectorizor.fit_transform(data)\ntf_idf_norm = normalize(tf_idf)\ntf_idf_array = tf_idf_norm.toarray()\npd.DataFrame(tf_idf_array, columns=tf_idf_vectorizor.get_feature_names()).head()","metadata":{"_uuid":"fb2909daf33457bf51b41c99123df20d862e253d","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# K means sklearn","metadata":{"_uuid":"4e294e42d5a5cf233e52e9d4d1b750295683416b"}},{"cell_type":"code","source":"from sklearn.cluster import KMeans\nn_clusters = 3\nsklearn_pca = PCA(n_components = 2)\nY_sklearn = sklearn_pca.fit_transform(tf_idf_array)\nkmeans = KMeans(n_clusters= n_clusters, max_iter=600, algorithm = 'auto')\n%time fitted = kmeans.fit(Y_sklearn)\nprediction = kmeans.predict(Y_sklearn)\n\nplt.scatter(Y_sklearn[:, 0], Y_sklearn[:, 1],c=prediction ,s=50, cmap='viridis')\n\ncenters2 = fitted.cluster_centers_\nplt.scatter(centers2[:, 0], centers2[:, 1],c='black', s=300, alpha=0.6);","metadata":{"_uuid":"42c293bd6976760b881185b9942afe76c542d688","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Draw Distributions","metadata":{"_uuid":"05d6b0ce1e80ff01fb9c16bec42dfb04926da8b9"}},{"cell_type":"code","source":"from matplotlib.patches import Ellipse\n\ndef draw_ellipse(position, covariance, ax=None, **kwargs):\n    \"\"\"Draw an ellipse with a given position and covariance\"\"\"\n    ax = ax or plt.gca()\n    \n    # Convert covariance to principal axes\n    if covariance.shape == (2, 2):\n        U, s, Vt = np.linalg.svd(covariance)\n        angle = np.degrees(np.arctan2(U[1, 0], U[0, 0]))\n        width, height = 2 * np.sqrt(s)\n    else:\n        angle = 0\n        width, height = 2 * np.sqrt(covariance)\n    \n    # Draw the Ellipse\n    for nsig in range(1, 4):\n        ax.add_patch(Ellipse(position, nsig * width, nsig * height,\n                             angle, **kwargs))","metadata":{"_uuid":"742bc0f237e29a1131aad5ce17f7e6c35ca2bb35","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# GMM sklearn","metadata":{"_uuid":"bd9975d37bb3bc88163da417d6f1e4e3fa7c05e8"}},{"cell_type":"code","source":"from sklearn.mixture import GaussianMixture\nsklearn_pca = PCA(n_components = 2)\nY_sklearn = sklearn_pca.fit_transform(tf_idf_array)\ngmm = GaussianMixture(n_components=3, covariance_type='full').fit(Y_sklearn)\nprediction_gmm = gmm.predict(Y_sklearn)\nprobs = gmm.predict_proba(Y_sklearn)\n\ncenters = np.zeros((3,2))\nfor i in range(3):\n    density = mvn(cov=gmm.covariances_[i], mean=gmm.means_[i]).logpdf(Y_sklearn)\n    centers[i, :] = Y_sklearn[np.argmax(density)]\n\nplt.figure(figsize = (10,8))\nplt.scatter(Y_sklearn[:, 0], Y_sklearn[:, 1],c=prediction_gmm ,s=50, cmap='viridis')\nplt.scatter(centers[:, 0], centers[:, 1],c='black', s=300, alpha=0.6);","metadata":{"_uuid":"6cd82179207c77dec0cd2ad749212c843871a47e","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# diag, Gaussians are aligned with th axis\nplt.figure(figsize = (10,8))\nplt.scatter(Y_sklearn[:, 0], Y_sklearn[:, 1],c=prediction_gmm ,s=50, cmap='viridis', zorder=1)\nplt.scatter(centers[:, 0], centers[:, 1],c='black', s=300, alpha=0.6);\n\nw_factor = 0.2 / gmm.weights_.max()\nfor pos, covar, w in zip(gmm.means_, gmm.covariances_, gmm.weights_):\n    draw_ellipse(pos, covar, alpha=w*.75)","metadata":{"_uuid":"9177f828dcfd4cbe7751b3ff27f45362a4257510","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"GMM weights: \", gmm.weights_)\nprint(\"GMM means: \", gmm.means_)\nprint(\"GMM Covariance: \", gmm.covariances_)\nprint('-----------------------------')\nprint(\"My model weights: \", model.pi)\nprint(\"My model means: \", model.mu)\nprint(\"My model Covariance: \", model.sigma)","metadata":{"_uuid":"b9a3ffda823d04605c0408eef8ca51a0cca724e2","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (10,8))\nfrom scipy.spatial.distance import cdist\ndef plot_kmeans(kmeans, X, n_clusters=3, rseed=0, ax=None):\n    labels = kmeans.fit_predict(X)\n\n    # plot the input data\n    ax = ax or plt.gca()\n    ax.axis('equal')\n    ax.scatter(X[:, 0], X[:, 1], c=labels, s=40, cmap='viridis', zorder=2)\n\n    # plot the representation of the KMeans model\n    centers = kmeans.cluster_centers_\n    radii = [cdist(X[labels == i], [center]).max()\n             for i, center in enumerate(centers)]\n    for c, r in zip(centers, radii):\n        ax.add_patch(plt.Circle(c, r, fc='#CCCCCC', lw=3, alpha=0.5, zorder=1))\n        \nplot_kmeans(kmeans, Y_sklearn)","metadata":{"_uuid":"625faee3071cad7cf9274b2619a62cb4e3acc3bd","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (10,8))\nplt.scatter(Y_sklearn[:, 0], Y_sklearn[:, 1],c=prediction_gmm ,s=50, cmap='viridis', zorder=1)\nplt.scatter(centers[:, 0], centers[:, 1],c='black', s=300, alpha=0.6);\n\nw_factor = 0.2 / gmm.weights_.max()\nfor pos, covar, w in zip(gmm.means_, gmm.covariances_, gmm.weights_):\n    draw_ellipse(pos, covar, alpha=w*.75)","metadata":{"_uuid":"3ac02af380fdca17177dbd545fdc7257b3a2617f","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# GMM my implementation","metadata":{"_uuid":"140a1b900e0d4419b0c6132e662a1bbceca80642"}},{"cell_type":"code","source":"model = GMM(3, n_runs = 50)\n\nfitted_values = model.fit(Y_sklearn)\npredicted_values = model.predict(Y_sklearn)\n\n# # compute centers as point of highest density of distribution\ncenters = np.zeros((3,2))\nfor i in range(model.C):\n    density = mvn(cov=model.sigma[i], mean=model.mu[i]).logpdf(Y_sklearn)\n    centers[i, :] = Y_sklearn[np.argmax(density)]\n    \nplt.figure(figsize = (10,8))\nplt.scatter(Y_sklearn[:, 0], Y_sklearn[:, 1],c=predicted_values ,s=50, cmap='viridis', zorder=1)\n\nplt.scatter(centers[:, 0], centers[:, 1],c='black', s=300, alpha=0.5, zorder=2);\n\nw_factor = 0.2 / model.pi.max()\nfor pos, covar, w in zip(model.mu, model.sigma, model.pi):\n    draw_ellipse(pos, covar, alpha = w)","metadata":{"_uuid":"3c2136591a6a20b2daa8d88608d3b0552f8ecd5e","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"_uuid":"f86665c01cb82475cfcaca1964eecc84fd0a8e1f","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"_uuid":"44e78608d6065e138ce2f10d2b2b00a7374476f2","trusted":true},"execution_count":null,"outputs":[]}]}